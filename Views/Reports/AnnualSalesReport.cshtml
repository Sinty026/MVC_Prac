@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model SelectList
@{
    ViewBag.Title = "Annual Sales";
}

<div class="bg-light py-2 mb-2">
    <h2 class="text-center">AnnualSalesReport</h2>
</div>

<div class="row mb-3">
    <div class="col-2">
        <select name="year" asp-items="@Model" class="form-control">
            <option value="">Select...</option>
        </select>
    </div>
</div>

<div>
    <svg width="100%" height="600px" class="border border-primary rounded p-2"></svg>
</div>

@section scripts {
    <script type="module">
        import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm" 

        const svg = d3.select('svg');

        let w = svg.node().getBoundingClientRect().width;
        let h = svg.node().getBoundingClientRect().height;

        const chartMargins = {
            left: 40,
            right: 25,
            top: 25, 
            bottom: 80
        };

        w = w - (chartMargins.left + chartMargins.right);
        h = h - (chartMargins.top + chartMargins.bottom);

        console.log('Width: ' + w);
        console.log('Height: ' + h);

        document.querySelector('.row .col-2 [name="year"]').addEventListener('change', (event) => {
            let year = event.target.value;
            console.log("Year: " + year);

            if(year.length > 0){
                fetch(`/Reports/AnnualSalesReportData?year=${year}`)
                    .then(response =>{
                        console.log("response status: " + response.status);
                        console.log("response text: " + response.statusText);
                        return response.json();
                    })
                    .then(data => buildGraph(data))
                    .catch(err => console.log(err.message));
            }
        })

        function buildGraph(dataSet){
            console.log(dataSet);
            let totalItemsRange = d3.extent(dataSet, (d, i) => d.totalItems);
            let maxTotalItems = totalItemsRange[1];

            console.log("Max totalItems: " + maxTotalItems);

            const barMargin = 10;
            const barWidth = w / dataSet.length;

            let yScale = d3.scaleLinear()
                .domain([0, maxTotalItems])
                .range([h, 0]);

            let monthArray = Array.from(dataSet, (d, i) => d.monthName);
            console.log("array: " + monthArray)

            let xScale = d3.scaleBand()
                .domain(monthArray)
                .range([0, w])
                .paddingInner(0.1)

            console.log("xscale:" + xScale("March"))


            const chartGroup = svg.append('g')
                .classed('chartGroup', true)
                .attr('transform', `translate(${chartMargins.left},${chartMargins.top})`);

            let barGroups = svg
                .selectAll('g')
                .data(dataSet);

            let newBarGroups = barGroups.enter()
                .append('g')
                .attr('transform', (d, i) => {
                    return `translate(${xScale(d.monthName)},${yScale(d.totalItems)})`;
                });

            newBarGroups
            .append('rect')
            .attr('x', 0)
            .attr('height', 0)
            .attr('y', (d, i) => { return h - yScale(d.totalItems); })
            .attr('width', xScale.bandwidth())
            .style('fill', 'black')
            .transition().duration((d, i) => i * 500)
            .delay((d, i) => i + 200)
            .attr('y', 0)
            .attr('height', (d, i) => { return h - yScale(d.totalItems); })
            .style("fill", (d, i) => {return `rgb(20, 20, ${i * 15 + 20})`})



            newBarGroups
                .append('text')
                .attr("text-anchor", "middle")
                .attr('x', (d, i) => {return xScale.bandwidth() / 2;})
                .attr("y", 20)
                .attr("fill", "white")
                .attr("font-size", "1em")
                .text((d, i) => d.totalItems.toLocaleString()); 


            let yAxis = d3.axisLeft(yScale);
            chartGroup.append('g')
                .classed('axis y', true)
                .call(yAxis)

            let xAxis = d3.axisBottom(xScale);
            chartGroup.append('g')
                .attr('transform', `translate(0,${h})`)
                .classed('axis x', true)
                .call(xAxis)

            chartGroup.selectAll('.axis.x text')
                .attr("transform", "rotate(-70)")
                .attr("dx", "-0.9em")
                .attr("dy", "0.25em")
                .attr("text-anchor", "end")
                .attr("font-size", "0.9em")


        }

    </script>
}